---
layout: default
css: styles/whoWeAre.css
execute:
  echo: false
---

::: { .column-screen-left }

```{ojs}
// A lot of setup here, mostly so we can have a common state
// between nodeLinkDiagram and the sidebar
import { combineAndOverrideGithubData } from './components/utilities.ojs';
import { nodeLinkDiagram } from './components/nodeLinkDiagram.ojs';

peopleData = combineAndOverrideGithubData();

mutable selectedNode = null

// On load, and when the back button is pressed, select the node indicated by the URL (if there is one)
function handleHashChange () {
  mutable selectedNode = window.location.hash
    ? peopleData.graph.nodes.find(node => node.hash === window.location.hash.slice(1)) || null
    : null
}

// More ojs weirdness: need to wrap event assignments in a cell
// or `undefined` will show up in the page
dummy = {
  window.addEventListener('hashchange', handleHashChange);
  window.addEventListener('load', handleHashChange);
}

render = nodeLinkDiagram(peopleData.graph.nodes, peopleData.graph.links);
diagram = render((node) => {
  mutable selectedNode = node;
  window.location.hash = node.hash;
}, selectedNode);
```
:::

::: { .column-margin }
```{ojs}
{
  if (selectedNode === null) {
    return md`
This is a diagram of attendees, current and past organizers, and
their relationships to various ResBaz Arizona events.

*Click a node for more information*
    `;
  } else if (selectedNode.type === 'PERSON') {
    const header = selectedNode.name
      ? md`# ${selectedNode.name}`
      : (selectedNode.login
        ? md`# ${selectedNode.login}`
        : '');

    const profilePic = selectedNode.avatarUrl ? html`<figure class="figure">
      <img class="img-fluid figure-img" src="${selectedNode.avatarUrl}"/>
    </figure>` : '';

    const company = selectedNode.company ? md`*${selectedNode.company}*` : '';

    console.log(selectedNode);

    const extraSocialAccounts = selectedNode?.socialAccounts?.edges
      ?.filter(edge => edge.node?.provider && edge.node?.url)
      ?.map(edge => edge.node) || [];
    const socialIconList = [
      ...(selectedNode?.websiteUrl ? [{ url: `https://github.com/${selectedNode.websiteUrl}`, provider: 'link' }] : []),
      ...(selectedNode ? [{ url: `https://github.com/${selectedNode.login}`, provider: 'github' }] : []),
      ...extraSocialAccounts,
    ].map(account => html`<a href="${account.url}">
        <img height="32px" src="img/logos/${account.provider.toLowerCase()}.svg"/>
      </a>`) || '';
    const socialIcons = html`<div class="socialIcons">${socialIconList}</div>`;

    // TODO: selectedNode.login for github link / icon, selectedNode.socialAccounts list for others

    const bio = selectedNode.bio ? md`${selectedNode.bio}` : '';

    return md`
${header}
${profilePic}
${socialIcons}
${company}
${bio}
`;
  }
  // TODO: sidebar for selectedNode.type === 'WEEKLY'
  // TODO: sidebar for selectedNode.type === 'FESTIVAL'
  return html`<p>Error! Unknown node: <pre>${
    JSON.stringify(selectedNode, null, 2)
  }</pre></p>`;
}
```
:::